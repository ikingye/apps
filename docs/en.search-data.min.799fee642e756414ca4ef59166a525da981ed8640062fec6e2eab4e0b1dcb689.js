'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/Programmer-Interview-Checklist/docs/basic/tutorial/','title':"教程",'content':"Java 教程 基础 进阶 doocs/advanced-java 互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识，后端同学必看，前端同学也可学习 https://doocs.github.io/advanced-java\nSnailclimb/JavaGuide 【Java 学习 + 面试指南】 一份涵盖大部分 Java 程序员所需要掌握的核心知识。\nEffective Java  第 3 版中文版：sjsdfg.github.io/effective-java-3rd-chinese   Java 编程思想  第 5 版中文版：lingcoder.github.io/OnJava8   redspider1/concurrent Java 多线程系列文章 在线阅读\n高阶 源码阅读 seaswalker/spring-analysis Spring 源码阅读\nseaswalker/JDK JDK 源码阅读笔记\n 参考 badges/shields  显示图片标签\n"});index.add({'id':1,'href':'/Programmer-Interview-Checklist/docs/security/web/','title':"Web 安全",'content':"Web 安全  一切的安全问题都体现在 “输入输出” 上，一切的安全问题都存在于 “数据流” 的整个过程中。\n 1. 如果在操作系统层上没处理好，比如 Linux 的 Bash 环境把 “特殊数据” 当做指令执行时，就产生了 OS 命令执行的安全问题，这段 “特殊数据” 可能长得如下这般： ; rm -rf /; 2. 如果在存储层的数据库中没处理好，数据库的 SQL 解析引擎把这个 “特殊数据” 当做指令执行时，就产生 SQL 注入这样的安全问题，这段 “特殊数据” 可能长得如下这般： ' union select user, pwd, 1, 2, 3, 4 from users-- 3. 如果在 Web 容器层如 nginx 中没处理好，nginx 把 “特殊数据” 当做指令执行时，可能会产生远程溢出、DoS 等各种安全问题，这段 “特殊数据” 可能长得如下这般： %c0.%c0./%c0.%c0./%c0.%c0./%c0.%c0./%20 4. 如果在 Web 开发框架或 Web 应用层中没处理好，把 “特殊数据” 当做指令执行时，可能会产生远程命令执行的安全问题，这段 “特殊数据” 可能长得如下这般： eval($_REQUEST['x']); 5. 如果在 Web 前端层中没处理好，浏览器的 JS 引擎把 “特殊数据” 当做指令执行时，可能会产生 XSS 跨站脚本的安全问题，这段 “特殊数据” 可能长得如下这般： '\u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert(/cos is my hero./)\u0026lt;/script\u0026gt; ...  参考：\n 零基础如何学习 Web 安全？  "});index.add({'id':2,'href':'/Programmer-Interview-Checklist/docs/security/web/xss/','title':"XSS",'content':"XSS Cross-site scripting 跨站脚本 (wiki)\nXSS 发生的原因 没有将用户输入的文本进行合适的过滤，就贸然插入到 HTML 中，这很容易造成注入漏洞。 攻击者可以利用漏洞，构造出恶意的代码指令，进而利用恶意代码危害数据安全。\n不仅仅是业务上的 “用户的 UGC 内容” 可以进行注入，包括 URL 上的参数等都可以是攻击的来源。在处理输入时，以下内容都不可信：\n 来自用户的 UGC 信息 来自第三方的链接 URL 参数 POST 参数 Referer （可能来自不可信的来源） Cookie （可能来自其他子域注入）  XSS 有哪些注入的方法  在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。 在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。 在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。 在标签的 href、src 等属性中，包含 javascript: 等可执行代码。 在 onload、onerror、onclick 等事件中，注入不受控制代码。 在 style 属性和标签中，包含类似 background-image:url(\u0026quot;javascript:...\u0026quot;); 的代码（新版本浏览器已经可以防范）。 在 style 属性和标签中，包含类似 expression(...) 的 CSS 表达式代码（新版本浏览器已经可以防范）。   XSS 分类 存储型 存储型 XSS 的攻击步骤：\n 攻击者将恶意代码提交到目标网站的数据库中。 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。  这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。\n反射型 反射型 XSS 的攻击步骤：\n 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。  反射型 XSS 跟存储型 XSS 的区别是：\n 存储型 XSS 的恶意代码存在数据库里， 反射型 XSS 的恶意代码存在 URL 里。  反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。\n由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。\nPOST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。\nDOM 型 DOM 型 XSS 的攻击步骤：\n 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL。 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。  DOM 型 XSS 跟前两种 XSS 的区别：\n DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞， 其他两种 XSS 都属于服务端的安全漏洞。   防止 XSS 输入过滤 输入侧过滤能够在某些情况下解决特定的 XSS 问题，但会引入很大的不确定性和乱码问题。 在防范 XSS 攻击时应避免此类方法。\n当然，对于明确的输入类型，例如数字、URL、电话号码、邮件地址等等内容，进行输入过滤还是必要的。\n纯前端渲染 纯前端渲染，把代码和数据分隔开\n纯前端渲染的过程：\n 浏览器先加载一个静态 HTML，此 HTML 中不包含任何跟业务相关的数据。 然后浏览器执行 HTML 中的 JavaScript。 JavaScript 通过 Ajax 加载业务数据，调用 DOM API 更新到页面上。  在纯前端渲染中，我们会明确的告诉浏览器： 下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。 浏览器不会被轻易的被欺骗，执行预期外的代码了。\n但纯前端渲染还需注意避免 DOM 型 XSS 漏洞（例如 onload 事件和 href 中的 javascript:xxx 等）。\n在很多内部、管理系统中，采用纯前端渲染是非常合适的。 但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。\n对 HTML 做充分转义 对插入到页面中的数据进行转义， 通常是把 \u0026amp; \u0026lt; \u0026gt; \u0026quot; ' / 这几个字符转义掉， 确实能起到一定的 XSS 防护作用，但要完善 XSS 防护措施，我们要使用更完善更细致的转义策略。\nHTML 转义是非常复杂的，在不同的情况下要采用不同的转义规则。如果采用了错误的转义规则，很有可能会埋下 XSS 隐患。 应当尽量避免自己写转义库，而应当采用成熟的、业界通用的转义库。\n常用的模板引擎，如 doT.js、ejs、FreeMarker 等， Java 工程里，常用的转义库为 org.owasp.encoder。\n验证 href 的值 对于链接跳转，如 \u0026lt;a href=\u0026quot;xxx\u0026quot; 或 location.href=\u0026quot;xxx\u0026quot;，要检验其内容，禁止以 javascript: 开头的链接，和其他非法的 scheme。\n// 根据项目情况进行过滤，禁止掉 \u0026#34;javascript:\u0026#34; 链接、非法 scheme 等 allowSchemes = [\u0026#34;http\u0026#34;, \u0026#34;https\u0026#34;]; valid = isValid(getParameter(\u0026#34;redirect_to\u0026#34;), allowSchemes); if (valid) { \u0026lt;a href=\u0026#34;\u0026lt;%= escapeHTML(getParameter(\u0026#34;redirect_to\u0026#34;))%\u0026gt;\u0026#34;\u0026gt; 跳转... \u0026lt;/a\u0026gt; } else { \u0026lt;a href=\u0026#34;/404\u0026#34;\u0026gt; 跳转... \u0026lt;/a\u0026gt; } 不区分大小写，可以带空格  JavaScript 不区分大小写： jAvascRipt:alert('XSS') 可以带空格 %20： %20javascript:alert('XSS')   escapeEmbedJSON 插入 JSON 的地方不能使用 escapeHTML()，因为转义 \u0026quot; 后，JSON 格式会被破坏。\n\u0026lt;script\u0026gt; var initData = \u0026lt;%= data.toJSON() %\u0026gt; \u0026lt;/script\u0026gt; 这样内联 JSON 也是不安全的\n 当 JSON 中包含 U+2028 或 U+2029 这两个字符时，不能作为 JavaScript 的字面量使用，否则会抛出语法错误。 当 JSON 中包含字符串 \u0026lt;/script\u0026gt; 时，当前的 script 标签将会被闭合，后面的字符串内容浏览器会按照 HTML 进行解析；通过增加下一个 \u0026lt;script\u0026gt; 标签等方法就可以完成注入。  \u0026lt;script\u0026gt; // 实现一个 escapeEmbedJSON() 函数，对内联 JSON 进行转义  var initData = \u0026lt;%= escapeEmbedJSON(data.toJSON()) %\u0026gt; \u0026lt;/script\u0026gt;  预防 DOM 型 XSS 攻击 在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上， 而应尽量使用 .textContent、.setAttribute() 等。\n如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能， 就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。\nDOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等， \u0026lt;a\u0026gt; 标签的 href 属性， JavaScript 的 eval()、setTimeout()、setInterval() 等， 都能把字符串作为代码运行。\n\u0026lt;!-- 内联事件监听器中包含恶意代码 --\u0026gt; ![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/3e724ce0.data:image/png,) \u0026lt;!-- 链接内包含恶意代码 --\u0026gt; \u0026lt;a href=\u0026#34;UNTRUSTED\u0026#34;\u0026gt;1\u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; // setTimeout()/setInterval() 中调用恶意代码  setTimeout(\u0026#34;UNTRUSTED\u0026#34;); setInterval(\u0026#34;UNTRUSTED\u0026#34;); // location 调用恶意代码  location.href = \u0026#34;UNTRUSTED\u0026#34;; // eval() 中调用恶意代码  eval(\u0026#34;UNTRUSTED\u0026#34;); \u0026lt;/script\u0026gt;  Content Security Policy 严格的 CSP 在 XSS 的防范中可以起到以下的作用：\n 禁止加载外域代码，防止复杂的攻击逻辑。 禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。 禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。 禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。 合理使用上报可以及时发现 XSS，利于尽快修复问题。  输入内容长度控制 对于不受信任的输入，都应该限定一个合理的长度。 虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。\n其他安全措施  HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。 验证码：防止脚本冒充用户提交危险操作。   XSS 的检测 jaVasCript:/*-/*`/*\\`/*\u0026#39;/*\u0026#34;/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//\u0026lt;/stYle/\u0026lt;/titLe/\u0026lt;/teXtarEa/\u0026lt;/scRipt/--!\u0026gt;\\x3csVg/\u0026lt;sVg/oNloAd=alert()//\u0026gt;\\x3e 只要在网站的各输入框中提交这个字符串，或者把它拼接到 URL 参数上，就可以进行检测了。\n能够检测到存在于 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等多种上下文中的 XSS 漏洞， 也能检测 eval()、setTimeout()、setInterval()、Function()、innerHTML、document.write() 等 DOM 型 XSS 漏洞， 并且能绕过一些 XSS 过滤器。\n自动扫描工具  Arachni Mozilla HTTP Observatory w3af   参考  在学习 XSS 前应该学习什么？ 前端安全系列（一）：如何防止 XSS 攻击？  "});index.add({'id':3,'href':'/Programmer-Interview-Checklist/docs/basic/','title':"基础",'content':""});index.add({'id':4,'href':'/Programmer-Interview-Checklist/docs/basic/encode/','title':"编码",'content':"编码 "});index.add({'id':5,'href':'/Programmer-Interview-Checklist/docs/software-engineering/design-pattern/','title':"设计模式",'content':"设计模式 "});index.add({'id':6,'href':'/Programmer-Interview-Checklist/docs/security/web/csrf/','title':"CSRF",'content':"CSRF  参考  前端安全系列（二）：如何防止 CSRF 攻击？  "});index.add({'id':7,'href':'/Programmer-Interview-Checklist/docs/software-engineering/architecture/','title':"架构设计",'content':"架构设计 "});index.add({'id':8,'href':'/Programmer-Interview-Checklist/docs/software-engineering/','title':"软件工程",'content':""});index.add({'id':9,'href':'/Programmer-Interview-Checklist/docs/software-engineering/architecture/high-scalability/','title':"高扩展性",'content':"高扩展性 如何构建高扩展性网站 参考：\n 如何构建高扩展性网站？  "});index.add({'id':10,'href':'/Programmer-Interview-Checklist/docs/backend/','title':"后台",'content':""});index.add({'id':11,'href':'/Programmer-Interview-Checklist/docs/frontend/','title':"前端",'content':""});index.add({'id':12,'href':'/Programmer-Interview-Checklist/docs/devops/','title':"运维",'content':""});index.add({'id':13,'href':'/Programmer-Interview-Checklist/docs/test/','title':"测试",'content':""});index.add({'id':14,'href':'/Programmer-Interview-Checklist/docs/security/','title':"安全",'content':""});index.add({'id':15,'href':'/Programmer-Interview-Checklist/docs/','title':"Docs",'content':""});})();